(ns mbezjak.core-extensions.text-test
  (:refer-clojure :exclude [double? int?])
  (:require
   [clojure.test :refer [deftest is]]
   [mbezjak.core-extensions.text :as sut])
  (:import
   (java.time LocalDate Year YearMonth)))

(deftest try-as-int
  (is (= -1 (sut/try-as-int "-1")))
  (is (= 0 (sut/try-as-int "0")))
  (is (= 1 (sut/try-as-int "1")))
  (is (= 1 (sut/try-as-int "+1")))
  (is (nil? (sut/try-as-int "1.1")))
  (is (nil? (sut/try-as-int "1e3")))
  (is (nil? (sut/try-as-int "0xFF")))
  (is (nil? (sut/try-as-int "NaN")))
  (is (nil? (sut/try-as-int "Infinity")))
  (is (nil? (sut/try-as-int "-Infinity")))
  (is (nil? (sut/try-as-int "abc")))
  (is (nil? (sut/try-as-int "abc123")))
  (is (nil? (sut/try-as-int "")))
  (is (nil? (sut/try-as-int nil))))

(deftest try-as-double
  (is (= -1.0 (sut/try-as-double "-1")))
  (is (= 0.0 (sut/try-as-double "0")))
  (is (= 1.0 (sut/try-as-double "1")))
  (is (= 1.0 (sut/try-as-double "+1")))
  (is (= -1.1 (sut/try-as-double "-1.1")))
  (is (= 1.1 (sut/try-as-double "1.1")))
  (is (= 0.1 (sut/try-as-double ".1")))
  (is (= -1000.0 (sut/try-as-double "-1e3")))
  (is (= 1000.0 (sut/try-as-double "1e3")))
  (is (= 1000.0 (sut/try-as-double "+1e3")))
  (is (= 0.001 (sut/try-as-double "1e-3")))
  (is (= 1.1 (sut/try-as-double "  1.1  ")))
  (is (Double/isNaN (sut/try-as-double "NaN")))
  (is (Double/isNaN (sut/try-as-double "  NaN  ")))
  (is (Double/isInfinite (sut/try-as-double "Infinity")))
  (is (Double/isInfinite (sut/try-as-double "  Infinity  ")))
  (is (Double/isInfinite (sut/try-as-double "-Infinity")))
  (is (Double/isInfinite (sut/try-as-double "  -Infinity  ")))
  (is (nil? (sut/try-as-double "1e2.5")))
  (is (nil? (sut/try-as-double "nan")))
  (is (nil? (sut/try-as-double "infinity")))
  (is (nil? (sut/try-as-double "-infinity")))
  (is (nil? (sut/try-as-double "0xFF")))
  (is (nil? (sut/try-as-double "0xFF.11")))
  (is (nil? (sut/try-as-double "abc")))
  (is (nil? (sut/try-as-double "abc123")))
  (is (nil? (sut/try-as-double "")))
  (is (nil? (sut/try-as-double nil))))

(deftest try-as-finite-double
  (is (= -1.0 (sut/try-as-finite-double "-1")))
  (is (= 0.0 (sut/try-as-finite-double "0")))
  (is (= 1.0 (sut/try-as-finite-double "1")))
  (is (= 1.0 (sut/try-as-finite-double "+1")))
  (is (= -1.1 (sut/try-as-finite-double "-1.1")))
  (is (= 1.1 (sut/try-as-finite-double "1.1")))
  (is (= 0.1 (sut/try-as-finite-double ".1")))
  (is (= -1000.0 (sut/try-as-finite-double "-1e3")))
  (is (= 1000.0 (sut/try-as-finite-double "1e3")))
  (is (= 1000.0 (sut/try-as-finite-double "+1e3")))
  (is (= 0.001 (sut/try-as-finite-double "1e-3")))
  (is (= 1.1 (sut/try-as-finite-double "  1.1  ")))
  (is (nil? (sut/try-as-finite-double "NaN")))
  (is (nil? (sut/try-as-finite-double "  NaN  ")))
  (is (nil? (sut/try-as-finite-double "Infinity")))
  (is (nil? (sut/try-as-finite-double "  Infinity  ")))
  (is (nil? (sut/try-as-finite-double "-Infinity")))
  (is (nil? (sut/try-as-finite-double "  -Infinity  ")))
  (is (nil? (sut/try-as-finite-double "1e2.5")))
  (is (nil? (sut/try-as-finite-double "nan")))
  (is (nil? (sut/try-as-finite-double "infinity")))
  (is (nil? (sut/try-as-finite-double "-infinity")))
  (is (nil? (sut/try-as-finite-double "0xFF")))
  (is (nil? (sut/try-as-finite-double "0xFF.11")))
  (is (nil? (sut/try-as-finite-double "abc")))
  (is (nil? (sut/try-as-finite-double "abc123")))
  (is (nil? (sut/try-as-finite-double "")))
  (is (nil? (sut/try-as-finite-double nil))))

(deftest try-as-boolean
  (is (true? (sut/try-as-boolean "true")))
  (is (true? (sut/try-as-boolean "  true  ")))
  (is (false? (sut/try-as-boolean "false")))
  (is (false? (sut/try-as-boolean "  false  ")))
  (is (nil? (sut/try-as-boolean nil)))
  (is (nil? (sut/try-as-boolean "")))
  (is (nil? (sut/try-as-boolean "1")))
  (is (nil? (sut/try-as-boolean "0")))
  (is (nil? (sut/try-as-boolean "on")))
  (is (nil? (sut/try-as-boolean "off")))
  (is (nil? (sut/try-as-boolean "yes")))
  (is (nil? (sut/try-as-boolean "no")))
  (is (nil? (sut/try-as-boolean "abc"))))

(deftest try-as-year
  (is (= (Year/of 2020) (sut/try-as-year "2020")))
  (is (= (Year/of 2) (sut/try-as-year "2")))
  (is (= (Year/of -1) (sut/try-as-year "-1")))
  (is (nil? (sut/try-as-year nil)))
  (is (nil? (sut/try-as-year "")))
  (is (nil? (sut/try-as-year "abc")))
  (is (nil? (sut/try-as-year "2020-12")))
  (is (nil? (sut/try-as-year "2020-12-31"))))

(deftest try-as-year-month
  (is (= (YearMonth/of 2020 1) (sut/try-as-year-month "2020-01")))
  (is (nil? (sut/try-as-year-month nil)))
  (is (nil? (sut/try-as-year-month "")))
  (is (nil? (sut/try-as-year-month "abc")))
  (is (nil? (sut/try-as-year-month "2020")))
  (is (nil? (sut/try-as-year-month "2020-0")))
  (is (nil? (sut/try-as-year-month "2020-2")))
  (is (nil? (sut/try-as-year-month "2020-13")))
  (is (nil? (sut/try-as-year-month "2020-12-31"))))

(deftest try-as-date
  (is (= (LocalDate/of 2020 1 25) (sut/try-as-date "2020-01-25")))
  (is (nil? (sut/try-as-date nil)))
  (is (nil? (sut/try-as-date "")))
  (is (nil? (sut/try-as-date "abc")))
  (is (nil? (sut/try-as-date "2020")))
  (is (nil? (sut/try-as-date "2020-12")))
  (is (nil? (sut/try-as-date "2020-3-2")))
  (is (nil? (sut/try-as-date "2020-12-31-4"))))

(deftest as-number-if-possible
  (is (= 0 (sut/as-number-if-possible "0")))
  (is (= 1 (sut/as-number-if-possible "1")))
  (is (= -1 (sut/as-number-if-possible "-1")))
  (is (= 1.5 (sut/as-number-if-possible "1.5")))
  (is (= -5.9 (sut/as-number-if-possible "-5.9")))
  (is (= Integer (type (sut/as-number-if-possible "0"))))
  (is (= Double (type (sut/as-number-if-possible "1.1"))))
  (is (= "" (sut/as-number-if-possible "")))
  (is (= nil (sut/as-number-if-possible nil)))
  (is (= "Infinity" (sut/as-number-if-possible "Infinity")))
  (is (= "abc" (sut/as-number-if-possible "abc"))))

(deftest int?
  (is (true? (sut/int? "1")))
  (is (true? (sut/int? "0")))
  (is (true? (sut/int? "-1")))
  (is (false? (sut/int? "1.0")))
  (is (false? (sut/int? "abc"))))

(deftest double?
  (is (true? (sut/double? "-1")))
  (is (true? (sut/double? "0")))
  (is (true? (sut/double? "1")))
  (is (true? (sut/double? "+1")))
  (is (true? (sut/double? "-1.1")))
  (is (true? (sut/double? "1.1")))
  (is (true? (sut/double? ".1")))
  (is (true? (sut/double? "-1e3")))
  (is (true? (sut/double? "1e3")))
  (is (true? (sut/double? "+1e3")))
  (is (true? (sut/double? "1e-3")))
  (is (true? (sut/double? "  1.1  ")))
  (is (false? (sut/double? "NaN")))
  (is (false? (sut/double? "  NaN  ")))
  (is (false? (sut/double? "Infinity")))
  (is (false? (sut/double? "  Infinity  ")))
  (is (false? (sut/double? "-Infinity")))
  (is (false? (sut/double? "  -Infinity  ")))
  (is (false? (sut/double? "1e2.5")))
  (is (false? (sut/double? "nan")))
  (is (false? (sut/double? "infinity")))
  (is (false? (sut/double? "-infinity")))
  (is (false? (sut/double? "0xFF")))
  (is (false? (sut/double? "0xFF.11")))
  (is (false? (sut/double? "abc")))
  (is (false? (sut/double? "abc123")))
  (is (false? (sut/double? "")))
  (is (false? (sut/double? nil))))

(deftest positive-double?
  (is (true? (sut/positive-double? "1")))
  (is (true? (sut/positive-double? "+1")))
  (is (true? (sut/positive-double? "1.1")))
  (is (true? (sut/positive-double? ".1")))
  (is (true? (sut/positive-double? "1e3")))
  (is (true? (sut/positive-double? "+1e3")))
  (is (true? (sut/positive-double? "1e-3")))
  (is (true? (sut/positive-double? "  1.1  ")))
  (is (false? (sut/positive-double? "-1")))
  (is (false? (sut/positive-double? "0")))
  (is (false? (sut/positive-double? "-1.1")))
  (is (false? (sut/positive-double? "-1e3")))
  (is (false? (sut/positive-double? "NaN")))
  (is (false? (sut/positive-double? "  NaN  ")))
  (is (false? (sut/positive-double? "Infinity")))
  (is (false? (sut/positive-double? "  Infinity  ")))
  (is (false? (sut/positive-double? "-Infinity")))
  (is (false? (sut/positive-double? "  -Infinity  ")))
  (is (false? (sut/positive-double? "1e2.5")))
  (is (false? (sut/positive-double? "nan")))
  (is (false? (sut/positive-double? "infinity")))
  (is (false? (sut/positive-double? "-infinity")))
  (is (false? (sut/positive-double? "0xFF")))
  (is (false? (sut/positive-double? "0xFF.11")))
  (is (false? (sut/positive-double? "abc")))
  (is (false? (sut/positive-double? "abc123")))
  (is (false? (sut/positive-double? "")))
  (is (false? (sut/positive-double? nil))))

(deftest year?
  (is (true? (sut/year? "2020")))
  (is (false? (sut/year? "abc"))))

(deftest year-month?
  (is (true? (sut/year-month? "2020-12")))
  (is (false? (sut/year-month? "abc"))))

(deftest date?
  (is (true? (sut/date? "2020-12-31")))
  (is (false? (sut/date? "abc"))))

(deftest url?
  (is (true? (sut/url? "http://company.com")))
  (is (true? (sut/url? "https://company.com")))
  (is (true? (sut/url? "file:///home/user/Downloads")))

  (is (false? (sut/url? "custom://abc")))
  (is (false? (sut/url? "abc")))
  (is (false? (sut/url? "a:b")))
  (is (false? (sut/url? "a//b"))))

(deftest ellipsis
  (is (= "" (sut/ellipsis "" 0)))
  (is (= "" (sut/ellipsis "" 5)))

  (is (= "" (sut/ellipsis "a" 0)))
  (is (= "a" (sut/ellipsis "a" 1)))
  (is (= "a" (sut/ellipsis "a" 5)))

  (is (= "" (sut/ellipsis "abc" 0)))
  (is (= "." (sut/ellipsis "abc" 1)))
  (is (= ".." (sut/ellipsis "abc" 2)))
  (is (= "abc" (sut/ellipsis "abc" 3)))
  (is (= "abc" (sut/ellipsis "abc" 5)))

  (is (= "" (sut/ellipsis "abcdefghijkl" 0)))
  (is (= "." (sut/ellipsis "abcdefghijkl" 1)))
  (is (= ".." (sut/ellipsis "abcdefghijkl" 2)))
  (is (= "..." (sut/ellipsis "abcdefghijkl" 3)))
  (is (= "a..." (sut/ellipsis "abcdefghijkl" 4)))
  (is (= "ab..." (sut/ellipsis "abcdefghijkl" 5)))
  (is (= "abc..." (sut/ellipsis "abcdefghijkl" 6)))
  (is (= "abcd..." (sut/ellipsis "abcdefghijkl" 7)))
  (is (= "abcdefg..." (sut/ellipsis "abcdefghijkl" 10)))
  (is (= "abcdefgh..." (sut/ellipsis "abcdefghijkl" 11)))
  (is (= "abcdefghijkl" (sut/ellipsis "abcdefghijkl" 12)))
  (is (= "abcdefghijkl" (sut/ellipsis "abcdefghijkl" 20))))

(deftest blank->empty
  (is (= "" (sut/blank->empty "")))
  (is (= "" (sut/blank->empty " ")))
  (is (= "" (sut/blank->empty "\n")))
  (is (= "" (sut/blank->empty "\t")))
  (is (= "" (sut/blank->empty " \n \t \r\n ")))
  (is (= "a" (sut/blank->empty "a")))
  (is (= " a " (sut/blank->empty " a "))))